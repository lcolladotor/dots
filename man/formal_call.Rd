% Generated by roxygen2 (4.0.2): do not edit by hand
\name{formal_call}
\alias{formalCall}
\alias{formal_call}
\title{Run a function only using its formal arguments.}
\usage{
formal_call(fun, ...)
}
\arguments{
\item{fun}{A function to use (the actual function, not the character)}

\item{...}{A set of arguments. Only those matching the formal definition of
\code{fun} will be used when evaluating \code{fun}.}
}
\description{
Extract from the function definition its formal arguments. Then from
\code{...}, only use the arguments that are in the formal definition and
drop the rest. This helps avoid conflicts when you are passing arguments
with \code{...} but is not used by all of the functions you need.
}
\details{
Some functions are not defined with the \code{...} argument, and they will
choke if you use them in your functions and pass arguments they are not
using.
}
\examples{
## Lets define a very simple identity function
ident <- function(x) return(x)

## Now lets use it inside another function
maxIdent <- function(x, ...) {
    m <- max(x, ...)
    y <- ident(m, ...)
    return(y)
}
## Seems to work
maxIdent(1:10)

## But not when we actually use '...'
\dontrun{
maxIdent(1:10, 11)
}

## Lets now use formal_call() to run ident() only using the arguments it
## has as part of its function definition.
maxIdent2 <- function(x, ...) {
    m <- max(x, ...)
    y <- formal_call('ident', x = m, ...)
    return(y)
}

## Works now =)
maxIdent2(1:10, 11)
}
\author{
L. Collado-Torres
}

